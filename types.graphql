# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique
  latitude:Float
  longitude:Float
  createdAt: DateTime!
  updatedAt: DateTime!
  # Uncomment below - you can declare relations between models like this
  # posts: [Post!]! @relation(name: "UserPosts")
}
type Sight  @model{
  id: ID! @isUnique
  title: String
  body: String
  imageurl: String
  latitude: Float
  longitude: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Water @model {
  id:  ID! @isUnique,
  namn: String,
  kommunkod: String,
  lagesnoggrannhet:String,
  kalltyp: String,
  akvifertyp: String,
  registreraddatum:String,
  observationsdatum: String,
  temp: Double,
  mattflode: String,
  bedomtflode: String,
  ph: String,
  ledningsformaga: String,
  notering: String
}

type Person @model {
  id: ID! @isUnique
  latitude:Float
  longitude:Float
  createdAt: DateTime!
  updatedAt: DateTime!
  # Uncomment below - you can declare relations between models like this
  # posts: [Post!]! @relation(name: "UserPosts")
}
# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }

extend type Mutation {
  createPerson(longitude: Float, latitude: Float): Person
}

extend type Water {
  createWater(namn: String,
  kommunkod: String,
  lagesnoggrannhet:String,
  kalltyp: String,
  akvifertyp: String,
  registreraddatum:String,
  observationsdatum: String,
  temp: String,
  mattflode: String,
  bedomtflode: String,
  ph: String,
  ledningsformaga: String,
  notering: String): Water
}
